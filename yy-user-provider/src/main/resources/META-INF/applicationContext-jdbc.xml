<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/tx
	                    http://www.springframework.org/schema/tx/spring-tx.xsd">

    <bean id="main" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 配置主机名、端口、数据库 -->
        <property name="url" value="${jdbc.url}"/>
        <!-- 配置数据库的用户名、密码 -->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20"/>
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 配置是否缓存preparedStatement -->
        <property name="poolPreparedStatements" value="true"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="SELECT 1"/>
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>
    <bean id="slave" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 配置主机名、端口、数据库 -->
        <property name="url" value="${jdbc.url}"/>
        <!-- 配置数据库的用户名、密码 -->
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20"/>
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="testWhileIdle" value="true"/>
        <!-- 配置是否缓存preparedStatement -->
        <property name="poolPreparedStatements" value="true"/>
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="SELECT 1"/>
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="mergeSql" value="true"/>
        <!-- 慢sql阈值,毫秒 -->
        <property name="slowSqlMillis" value="600"/>
        <property name="logSlowSql" value="true"/>
    </bean>

    <bean id="dynamicDataSource" class="com.andy.yy.base.db.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="main" key="main"></entry>
                <entry value-ref="slave" key="slave"></entry>
            </map>
        </property>
        <!-- 默认数据源 -->
        <property name="defaultTargetDataSource" ref="main">
        </property>
    </bean>

    <!-- Session Factory -->
    <!-- Spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>

    <!-- Mapper Scanner -->
    <!-- 会扫描指定基包下面的所有接口，并把它们注册为一个个MapperFactoryBean对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.andy.yy.user.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- DynamicDataSourceAspect -->
    <bean id="dynamicDataSourceAspect" class="com.andy.yy.base.db.DynamicDataSourceAspect"/>

    <!-- TransactionManager -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true" order="2"/>
</beans>